//
// Generated by Microsoft (R) HLSL Shader Compiler 10.1
//
//
// Buffer Definitions: 
//
// cbuffer CONSTANT_BUFFER
// {
//
//   row_major float4x4 world_view_projection;// Offset:    0 Size:    64
//   row_major float4x4 world;          // Offset:   64 Size:    64
//   float4 material_color;             // Offset:  128 Size:    16
//   float4 light_direction;            // Offset:  144 Size:    16
//   row_major float4x4 bone_transforms[32];// Offset:  160 Size:  2048
//
// }
//
//
// Resource Bindings:
//
// Name                                 Type  Format         Dim      HLSL Bind  Count
// ------------------------------ ---------- ------- ----------- -------------- ------
// CONSTANT_BUFFER                   cbuffer      NA          NA            cb0      1 
//
//
//
// Input signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// POSITION                 0   xyzw        0     NONE   float   xyzw
// NORMAL                   0   xyzw        1     NONE   float   xyz 
// TEXCOORD                 0   xy          2     NONE   float   xy  
// WEIGHTS                  0   xyzw        3     NONE   float   xyzw
// BONES                    0   xyzw        4     NONE    uint   xyzw
//
//
// Output signature:
//
// Name                 Index   Mask Register SysValue  Format   Used
// -------------------- ----- ------ -------- -------- ------- ------
// SV_POSITION              0   xyzw        0      POS   float   xyzw
// COLOR                    0   xyzw        1     NONE   float   xyzw
// TEXCOORD                 0   xy          2     NONE   float   xy  
//
//
// Constant buffer to DX9 shader constant mappings:
//
// Target Reg Buffer  Start Reg # of Regs        Data Conversion
// ---------- ------- --------- --------- ----------------------
// c0         cb0             0       138  ( FLT, FLT, FLT, FLT)
//
//
// Runtime generated constant mappings:
//
// Target Reg                               Constant Description
// ---------- --------------------------------------------------
// c143                            Vertex Shader position offset
//
//
// Level9 shader bytecode:
//
    vs_2_x
    def c142, 4, 0, 1, 0
    def c138, 1, 0, 0, 0
    def c139, 0, 1, 0, 0
    def c140, 0, 0, 1, 0
    def c141, 0, 0, 0, 1
    defi i0, 4, 0, 1, 0
    dcl_texcoord v0  // position<0,1,2,3>
    dcl_texcoord1 v1  // normal<0,1,2,3>
    dcl_texcoord2 v2  // texcoord<0,1>
    dcl_texcoord3 v3  // bone_weights<0,1,2,3>
    dcl_texcoord4 v4  // bone_indices<0,1,2,3>

#line 7 "C:\Users\2190307\Desktop\team\team\team\Data\Shaders\skinned_mesh_vs.hlsl"
    mov r0.xyz, c138.w  // ::p<0,1,2>
    mov r1.xyz, c138.w  // ::n<0,1,2>
    loop aL, i0
      dp4 r0.w, v3, c138[aL]
      dp4 r1.w, v4, c138[aL]
      mul r1.w, r1.w, c142.x
      mova a0.x, r1.w
      mul r2.xyz, v0.x, c10[a0.x]
      mul r3.xyz, v0.y, c11[a0.x]
      add r2.xyz, r2, r3
      mul r3.xyz, v0.z, c12[a0.x]
      add r2.xyz, r2, r3
      mul r3.xyz, v0.w, c13[a0.x]
      add r2.xyz, r2, r3
      mul r2.xyz, r0.w, r2
      add r0.xyz, r0, r2  // ::p<0,1,2>
      dp4 r0.w, v3, c138[aL]
      dp4 r1.w, v4, c138[aL]
      mul r1.w, r1.w, c142.x
      mova a0.x, r1.w
      mul r2.xyz, v1.x, c10[a0.x]
      mul r3.xyz, v1.y, c11[a0.x]
      add r2.xyz, r2, r3
      mul r3.xyz, v1.z, c12[a0.x]
      add r2.xyz, r2, r3
      add r2.xyz, r2, c138.w
      mul r2.xyz, r0.w, r2
      add r1.xyz, r1, r2  // ::n<0,1,2>
    endloop
    mov r0.xyz, r0  // position<0,1,2>
    mov r1.xyz, r1  // normal<0,1,2>

#line 16
    mul r2, r0.x, c0
    mul r3, r0.y, c1
    add r2, r2, r3
    mul r0, r0.z, c2
    add r0, r0, r2
    mov r2.x, c138.x
    mul r2, r2.x, c3
    add r0, r0, r2  // ::vout<0,1,2,3>
    mul r2, r1.x, c4
    mul r3, r1.y, c5
    add r2, r2, r3
    mul r1, r1.z, c6
    add r1, r1, r2
    add r1, r1, c138.w
    dp4 r2.x, r1, r1
    rsq r2.x, r2.x
    mul r1, r1, r2.x  // ::N<0,1,2,3>
    mov r2, -c9
    dp4 r3.x, r2, r2
    rsq r3.x, r3.x
    mul r2, r2, r3.x  // ::L<0,1,2,3>
    dp4 r1.x, r2, r1
    max r1.x, r1.x, c138.w
    mul r1.xyz, r1.x, c8  // ::vout<4,5,6>
    mov r1.w, c8.w  // ::vout<7>

#line 46
    mov r2.xy, v2  // ::vout<8,9>
    mov oT0.xyz, r1  // ::main<4,5,6>
    mov oT0.w, r1.w  // ::main<7>
    mov r0.xy, r0  // ::main<0,1>
    mov r0.zw, r0  // ::main<2,3>
    mov oT1.xy, r2  // ::main<8,9>

#line 3
    mul r1.xy, r0.w, c143
    add oPos.xy, r0, r1  // ::main<0,1>
    mov oPos.zw, r0  // ::main<2,3>

// approximately 68 instruction slots used
vs_4_0
dcl_immediateConstantBuffer { { 1.000000, 0, 0, 0},
                              { 0, 1.000000, 0, 0},
                              { 0, 0, 1.000000, 0},
                              { 0, 0, 0, 1.000000},
                              { -1, 0, 0, 0},
                              { 0, -1, 0, 0},
                              { 0, 0, -1, 0},
                              { 0, 0, 0, -1} }
dcl_constantbuffer CB0[138], dynamicIndexed
dcl_input v0.xyzw
dcl_input v1.xyz
dcl_input v2.xy
dcl_input v3.xyzw
dcl_input v4.xyzw
dcl_output_siv o0.xyzw, position
dcl_output o1.xyzw
dcl_output o2.xy
dcl_temps 6
//
// Initial variable locations:
//   v0.x <- position.x; v0.y <- position.y; v0.z <- position.z; v0.w <- position.w; 
//   v1.x <- normal.x; v1.y <- normal.y; v1.z <- normal.z; v1.w <- normal.w; 
//   v2.x <- texcoord.x; v2.y <- texcoord.y; 
//   v3.x <- bone_weights.x; v3.y <- bone_weights.y; v3.z <- bone_weights.z; v3.w <- bone_weights.w; 
//   v4.x <- bone_indices.x; v4.y <- bone_indices.y; v4.z <- bone_indices.z; v4.w <- bone_indices.w; 
//   o2.x <- <main return value>.texcoord.x; o2.y <- <main return value>.texcoord.y; 
//   o1.x <- <main return value>.color.x; o1.y <- <main return value>.color.y; o1.z <- <main return value>.color.z; o1.w <- <main return value>.color.w; 
//   o0.x <- <main return value>.position.x; o0.y <- <main return value>.position.y; o0.z <- <main return value>.position.z; o0.w <- <main return value>.position.w
//
#line 5 "C:\Users\2190307\Desktop\team\team\team\Data\Shaders\skinned_mesh_vs.hlsl"
itof r0.xyz, l(0, 0, 0, 0)  // r0.x <- p.x; r0.y <- p.y; r0.z <- p.z

#line 6
itof r1.xyz, l(0, 0, 0, 0)  // r1.x <- n.x; r1.y <- n.y; r1.z <- n.z

#line 7
mov r0.w, l(0)  // r0.w <- i
mov r2.xyz, r0.xyzx  // r2.x <- p.x; r2.y <- p.y; r2.z <- p.z
mov r3.xyz, r1.xyzx  // r3.x <- n.x; r3.y <- n.y; r3.z <- n.z
mov r1.w, r0.w  // r1.w <- i
loop 
  ilt r2.w, r1.w, l(4)
  breakc_z r2.w

#line 9
  dp4 r2.w, v3.xyzw, icb[r1.w + 0].xyzw
  and r4.xyzw, v4.xyzw, icb[r1.w + 4].xyzw
  or r4.xy, r4.ywyy, r4.xzxx
  or r3.w, r4.y, r4.x
  imul null, r3.w, r3.w, l(4)
  mul r4.xyz, v0.xxxx, cb0[r3.w + 10].xyzx
  mul r5.xyz, v0.yyyy, cb0[r3.w + 11].xyzx
  add r4.xyz, r4.xyzx, r5.xyzx
  mul r5.xyz, v0.zzzz, cb0[r3.w + 12].xyzx
  add r4.xyz, r4.xyzx, r5.xyzx
  mul r5.xyz, v0.wwww, cb0[r3.w + 13].xyzx
  add r4.xyz, r4.xyzx, r5.xyzx
  mul r4.xyz, r2.wwww, r4.xyzx
  add r2.xyz, r2.xyzx, r4.xyzx

#line 10
  dp4 r2.w, v3.xyzw, icb[r1.w + 0].xyzw
  itof r3.w, l(0)
  and r4.xyzw, v4.xyzw, icb[r1.w + 4].xyzw
  or r4.xy, r4.ywyy, r4.xzxx
  or r4.x, r4.y, r4.x
  imul null, r4.x, r4.x, l(4)
  mul r4.yzw, v1.xxxx, cb0[r4.x + 10].xxyz
  mul r5.xyz, v1.yyyy, cb0[r4.x + 11].xyzx
  add r4.yzw, r4.yyzw, r5.xxyz
  mul r5.xyz, v1.zzzz, cb0[r4.x + 12].xyzx
  add r4.yzw, r4.yyzw, r5.xxyz
  mul r5.xyz, r3.wwww, cb0[r4.x + 13].xyzx
  add r4.xyz, r4.yzwy, r5.xyzx
  mul r4.xyz, r2.wwww, r4.xyzx
  add r3.xyz, r3.xyzx, r4.xyzx

#line 11
  iadd r1.w, r1.w, l(1)
endloop 

#line 12
mov r2.xyz, r2.xyzx  // r2.x <- position.x; r2.y <- position.y; r2.z <- position.z
mov r0.x, l(1.000000)  // r0.x <- position.w

#line 13
mov r3.xyz, r3.xyzx  // r3.x <- normal.x; r3.y <- normal.y; r3.z <- normal.z

#line 16
mul r1.xyzw, r2.xxxx, cb0[0].xyzw
mul r4.xyzw, r2.yyyy, cb0[1].xyzw
add r1.xyzw, r1.xyzw, r4.xyzw
mul r2.xyzw, r2.zzzz, cb0[2].xyzw
add r1.xyzw, r1.xyzw, r2.xyzw
mul r0.xyzw, r0.xxxx, cb0[3].xyzw
add r0.xyzw, r0.xyzw, r1.xyzw  // r0.x <- vout.position.x; r0.y <- vout.position.y; r0.z <- vout.position.z; r0.w <- vout.position.w

#line 17
itof r1.x, l(0)  // r1.x <- normal.w

#line 18
mul r2.xyzw, r3.xxxx, cb0[4].xyzw
mul r4.xyzw, r3.yyyy, cb0[5].xyzw
add r2.xyzw, r2.xyzw, r4.xyzw
mul r3.xyzw, r3.zzzz, cb0[6].xyzw
add r2.xyzw, r2.xyzw, r3.xyzw
mul r1.xyzw, r1.xxxx, cb0[7].xyzw
add r1.xyzw, r1.xyzw, r2.xyzw
dp4 r2.x, r1.xyzw, r1.xyzw
rsq r2.x, r2.x
mul r1.xyzw, r1.xyzw, r2.xxxx  // r1.x <- N.x; r1.y <- N.y; r1.z <- N.z; r1.w <- N.w

#line 19
mov r2.xyzw, -cb0[9].xyzw
dp4 r3.x, r2.xyzw, r2.xyzw
rsq r3.x, r3.x
mul r2.xyzw, r2.xyzw, r3.xxxx  // r2.x <- L.x; r2.y <- L.y; r2.z <- L.z; r2.w <- L.w

#line 21
itof r3.x, l(0)
dp4 r1.x, r2.xyzw, r1.xyzw
max r1.x, r1.x, r3.x
mul r1.xyz, r1.xxxx, cb0[8].xyzx  // r1.x <- vout.color.x; r1.y <- vout.color.y; r1.z <- vout.color.z

#line 22
mov r1.w, cb0[8].w  // r1.w <- vout.color.w

#line 46
mov r2.xy, v2.xyxx  // r2.x <- vout.texcoord.x; r2.y <- vout.texcoord.y

#line 48
mov o0.xyzw, r0.xyzw
mov o1.xyz, r1.xyzx
mov o1.w, r1.w
mov o2.xy, r2.xyxx
ret 
// Approximately 76 instruction slots used
